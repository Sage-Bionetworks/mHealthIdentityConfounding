layer_dense(units = 10, activation = 'softmax')
summary(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
dim(data)
dim(labels)
hist(data[, 1])
hist(data[, 2])
ls()
model
library(keras)
library(keras)
remove.packages("keras")
remove.packages("tensorflow")
remove.packages("kerasR")
library(keras)
remove.packages("keras")
library(keras)
remove.packages("keras")
install.packages("keras", lib="C:/Program Files/R/R-3.4.1/library")
mnist <- dataset_mnist()
library(keras)
mnist <- dataset_mnist()
mnist <- dataset_mnist()
install.packages("reti", lib="C:/Program Files/R/R-3.4.1/library")
library(keras)
library(reticulate)
mnist <- dataset_mnist()
detach("package:reticulate", unload=TRUE)
remove.packages("reticulate", lib="~/R/win-library/3.4")
library(reticulate)
install.packages("reticulate", lib="C:/Program Files/R/R-3.4.1/library")
library(reticulate)
library(keras)
library(reticulate)
mnist <- dataset_mnist()
library(install.load)
install.load("reticulate", "keras")
?install_load
library(install.load)
install_load("reticulate", "keras")
mnist <- dataset_mnist()
sessionInfo()
library(install.load)
install_load("reticulate", "keras")
mnist <- dataset_mnist()
library(devtools)
devtools::install_github("rstudio/reticulate")
library(keras)
mnist <- dataset_mnist()
detach("package:keras", unload=TRUE)
remove.packages("keras", lib="C:/Program Files/R/R-3.4.1/library")
remove.packages("tensorflow", lib="C:/Program Files/R/R-3.4.1/library")
library(keras)
install.packages("keras", lib="C:/Program Files/R/R-3.4.1/library")
library(keras)
mnist <- dataset_mnist()
remove.packages("reticulate", lib="~/R/win-library/3.4")
remove.packages("keras", lib="C:/Program Files/R/R-3.4.1/library")
remove.packages("reticulate", lib="C:/Program Files/R/R-3.4.1/library")
remove.packages("tensorflow", lib="C:/Program Files/R/R-3.4.1/library")
library(keras)
library(reticulate)
library(devtools)
devtools::install_github("rstudio/reticulate")
library(reticulate)
library(keras)
devtools::install_github("rstudio/keras")
library(keras)
mnist <- dataset_mnist()
sqrt(512)
?write.csv
?matchit
library(MatchIt)
?matchit
library(keras)
library(reticulate)
mnist <- dataset_mnist()
tf_config()
reticulate::py_config()
tensorflow::tf_config()
remove.packages("keras", lib="~/R/win-library/3.4")
library("tensorflow", lib.loc="~/R/win-library/3.4")
detach("package:tensorflow", unload=TRUE)
remove.packages("tensorflow", lib="~/R/win-library/3.4")
remove.packages("reticulate", lib="~/R/win-library/3.4")
install.packages("keras", lib="C:/Program Files/R/R-3.4.1/library")
library(keras)
reticulate::py_config()
tensorflow::tf_config()
library(RItools)
library(keras)
library(reticulate)
mnist <- dataset_mnist()
reticulate::py_config()
Sys.setenv(TENSORFLOW_PYTHON="C:\Users\echaibub\AppData\Local\CONTIN~1\ANACON~1\python.exe")
Sys.setenv(TENSORFLOW_PYTHON="C:/Users/echaibub/AppData/Local/CONTIN~1/ANACON~1/python.exe")
library(keras)
library(reticulate)
reticulate::py_config()
mnist <- dataset_mnist()
library(kerasR)
install.packages("kerasR", lib="C:/Program Files/R/R-3.4.1/library")
library(kerasR)
mnist <- dataset_mnist()
?kerasR
load_mnist()
reticulate::py_config()
remove.packages("reticulate", lib="C:/Program Files/R/R-3.4.1/library")
remove.packages("devtools", lib="~/R/win-library/3.4")
install.packages("devtools", lib="C:/Program Files/R/R-3.4.1/library")
library(devtools)
detach("package:devtools", unload=TRUE)
remove.packages("devtools", lib="C:/Program Files/R/R-3.4.1/library")
install.packages("devtools", lib="C:/Program Files/R/R-3.4.1/library")
library(devtools)
devtools::install_github("rstudio/reticulate")
remove.packages("keras", lib="C:/Program Files/R/R-3.4.1/library")
remove.packages("kerasR", lib="C:/Program Files/R/R-3.4.1/library")
remove.packages("tensorflow", lib="C:/Program Files/R/R-3.4.1/library")
require(synapseClient)
synapseLogin()
train_dat <- read.table(getFileLocation(synGet("syn11420836")))
test_dat=train_dat
dim(test_dat)
train_dat <- read.table(getFileLocation(synGet("syn11420834")))
x_train <- train_dat[, 2:1002]
dim(x_train)
x_train <- train_dat[, 2:1001]
y_train <- train_dat[, 1]
x_test <- test_dat[, 2:1001]
y_test <- test_dat[, 1]
library(keras)
x_train <- train_dat[, 2:1001]/3
y_train <- train_dat[, 1]
x_test <- test_dat[, 2:1001]/3
y_test <- test_dat[, 1]
hist(x_train)
hist(as.vector(x_train))
x_train[1:5, 1:5]
str(x_train)
class(x_train)
x_train <- as.matrix(train_dat[, 2:1001]/3)
y_train <- train_dat[, 1]
x_test <- as.matrix(test_dat[, 2:1001]/3)
y_test <- test_dat[, 1]
class(y_train)
hist(x_train)
library(keras)
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
dim(y_train)
y_train <- train_dat[, 1]
y_test <- test_dat[, 1]
y_train <- to_categorical(y_train, 2)
y_test <- to_categorical(y_test, 2)
dim(y_train)
head(y_train)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
summary(model)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(1000)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2, activation = 'tanh')
summary(model)
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
plot(history)
model %>% evaluate(x_test, y_test)
w <- get_weights(object = model)
str(w)
pred <- model %>% predict_classes(x_test)
summary(pred)
hist(pred)
table(y_train)
table(train_dat[, 1])
m <- apply(x_train, 1, mean)
plot(train_dat[, 1], m)
m <- apply(x_train, 1, IQR)
plot(train_dat[, 1], m)
model2 <- keras_model_sequential()
model2 %>%
layer_dense(units = 1, activation = 'sigmoid', input_shape = c(1)) %>%
summary(model2)
x_train2 <- apply(x_train, 1, IQR)
x_test2 <- apply(x_test, 1, IQR)
model2 %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history2 <- model2 %>% fit(
x_train2, y_train2,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
history2 <- model2 %>% fit(
x_train2, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model2 <- keras_model_sequential()
model2 %>%
layer_dense(units = 1, activation = 'sigmoid', input_shape = c(1))
summary(model2)
model2 %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history2 <- model2 %>% fit(
x_train2, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
dim(x_train2)
x_train2 <- matrix(apply(x_train, 1, IQR), nrow(x_train), 1)
history2 <- model2 %>% fit(
x_train2, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
dim(x_train)
dim(x_train2)
?layer_dense
model2 <- keras_model_sequential()
model2 %>%
layer_dense(units = 1, activation = 'sigmoid')
model2 <- keras_model_sequential()
model2 %>%
layer_dense(units = 1, activation = 'sigmoid', input_shape = c(1))
summary(model2)
model2 %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history2 <- model2 %>% fit(
x_train2, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model2 <- keras_model_sequential()
model2 %>%
layer_dense(units = 1, input_shape = c(1)) %>%
layer_activation('sigmoid')
summary(model2)
model2 %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history2 <- model2 %>% fit(
x_train2, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model2 <- keras_model_sequential()
model2 %>%
layer_dense(units = 1, activation = 'sigmoid' input_shape = c(12238, 1))
model2 <- keras_model_sequential()
model2 %>%
layer_dense(units = 1, activation = 'sigmoid', input_shape = c(12238, 1))
summary(model2)
model2 %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history2 <- model2 %>% fit(
x_train2, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(1000)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 1, activation = 'tanh')
summary(model)
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(1000)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2, activation = 'tanh')
summary(model)
model %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 2, batch_size = 128,
validation_split = 0.2
)
plot(history)
model %>% evaluate(x_test, y_test)
x_train2 <- apply(x_train, 1, IQR)
x_test2 <- apply(x_test, 1, IQR)
model2 <- keras_model_sequential()
model2 %>%
layer_dense(units = 1, activation = 'sigmoid', input_shape = c(2))
summary(model2)
model2 %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history2 <- model2 %>% fit(
x_train2, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
model2 <- keras_model_sequential()
model2 %>%
layer_dense(units = 2, activation = 'sigmoid', input_shape = c(1))
summary(model2)
model2 %>% compile(
loss = 'binary_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history2 <- model2 %>% fit(
x_train2, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
plot(history2)
model2 %>% evaluate(x_test2, y_test2)
model2 %>% evaluate(x_test2, y_test)
w2 <- get_weights(object = model2)
w2
require(synapseClient)
synapseLogin()
load(getFileLocation(synGet("syn8462994")))
dat <- read.delim(getFileLocation(synGet("syn8381052")), header = TRUE)
dim(dat)
datm <- dat[dat$gender == "Male",]
datf <- dat[dat$gender == "Female",]
matchit(PD ~ age, data = datf)
library(MatchIt)
matchit(PD ~ age, data = datf)
dim(dat)
head(dat)
dim(dat)
head(dat)
dat <- dat[, 1:5]
datm <- dat[dat$gender == "Male",]
datf <- dat[dat$gender == "Female",]
library(MatchIt)
matchit(PD ~ age, data = datf)
m <- matchit(PD ~ age, data = datf)
m
m <- matchit(PD ~ age, data = datf)
mm <- matchit(PD ~ age, data = datm)
mm <- matchit(PD ~ age, data = datm, method = "exact")
mf <- matchit(PD ~ age, data = datf, method = "exact")
dat <- read.delim(getFileLocation(synGet("syn8381052")), header = TRUE)
dim(dat)
head(dat)
dat <- dat[, 1:5]
datm <- dat[dat$gender == "Male",]
datf <- dat[dat$gender == "Female",]
library(MatchIt)
mm <- matchit(PD ~ age, data = datm, method = "exact")
str(datm)
require(synapseClient)
synapseLogin()
load(getFileLocation(synGet("syn9966019")))
class(outRes)
length(outRes)
outRes[[1]]
outRes[[1]]$lmPvals
outRes[[1]]
setwd("~/public_mPower/analysis_scripts/individual_confounding/analysis/mHealthIdentityConfounding/code")
library(synapseClient)
synapseLogin()
f9 <- synGet("syn11566306", downloadFile = FALSE)
f9 <- synStore(f9,
used = c("syn10903849", "syn10903906", "syn10903865", "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/utility_functions_disease_recognition_and_identity_confounding.R?token=AAI6zwVqpa2otvq-BDmrqCqhmuTHvyPMks5aQr6HwA%3D%3D"),
executed = "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/tapping_example.R?token=ABoVeYVltkofSQLGncxHiTe-b1LIkgL8ks5aQ8sxwA%3D%3D")
f10 <- synGet("syn11566313", downloadFile = FALSE)
f10 <- synStore(f10,
used = c("syn10903849", "syn10903906", "syn10903865", "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/utility_functions_disease_recognition_and_identity_confounding.R?token=AAI6zwVqpa2otvq-BDmrqCqhmuTHvyPMks5aQr6HwA%3D%3D"),
executed = "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/mPower_tapping_data_example_100.R?token=ABoVebtB1joEr84jQ5Ltc2ZH7fCJRrhmks5aQ8wVwA%3D%3D")
f11 <- synGet("syn11566321", downloadFile = FALSE)
f11 <- synStore(f11,
used = c("syn10927961", "syn10927962", "syn10903864", "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/utility_functions_disease_recognition_and_identity_confounding.R?token=AAI6zwVqpa2otvq-BDmrqCqhmuTHvyPMks5aQr6HwA%3D%3D"),
executed = "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/mPower_voice_data_example_50.R?token=ABoVeZ47UDkpNNg6JBj5AL1G10BJkUgsks5aQ87rwA%3D%3D")
f12 <- synGet("syn11566323", downloadFile = FALSE)
f12 <- synStore(f12,
used = c("syn11059980", "syn11059982", "syn10903864", "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/utility_functions_disease_recognition_and_identity_confounding.R?token=AAI6zwVqpa2otvq-BDmrqCqhmuTHvyPMks5aQr6HwA%3D%3D"),
executed = "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/mPower_voice_data_example_10.R?token=ABoVeda8ToExBCzRSC06IU8gnNs57zjWks5aQ8-YwA%3D%3D")
f13 <- synGet("syn11566668", downloadFile = FALSE)
f13 <- synStore(f13,
used = c("syn10933730", "syn10933736", "syn10903865", "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/utility_functions_disease_recognition_and_identity_confounding.R?token=AAI6zwVqpa2otvq-BDmrqCqhmuTHvyPMks5aQr6HwA%3D%3D"),
executed = "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/mPower_tapping_data_example_50.R?token=ABoVeQ_mTRctfCKslcPexzS9erJbegHCks5aQ9QpwA%3D%3D")
f14 <- synGet("syn11566718", downloadFile = FALSE)
f14 <- synStore(f14,
used = c("syn11059974", "syn11059977", "syn10903865", "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/utility_functions_disease_recognition_and_identity_confounding.R?token=AAI6zwVqpa2otvq-BDmrqCqhmuTHvyPMks5aQr6HwA%3D%3D"),
executed = "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/mPower_tapping_data_example_10.R?token=ABoVee8grRHErsJJ2QeZ1QoXWghJUYF_ks5aQ9cjwA%3D%3D")
f15 <- synGet("syn10903849", downloadFile = FALSE)
f15 <- synStore(f15,
used = c("syn5511439", "syn5511429", "https://github.com/Sage-Bionetworks/mpowertools"),
executed = "")
f15 <- synGet("syn10903849", downloadFile = FALSE)
f15 <- synStore(f15,
used = c("syn5511439", "syn5511429", "https://github.com/Sage-Bionetworks/mpowertools/"),
executed = "")
f15 <- synGet("syn10903849", downloadFile = FALSE)
f15 <- synStore(f15,
used = c("syn5511439", "syn5511429", "https://github.com/Sage-Bionetworks/mpowertools"),
executed = "https:")
f15 <- synGet("syn10903849", downloadFile = FALSE)
f15 <- synStore(f15,
used = c("syn5511439", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f16 <- synGet("syn11059974", downloadFile = FALSE)
f16 <- synStore(f16,
used = c("syn5511439", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f17 <- synGet("syn10933730", downloadFile = FALSE)
f17 <- synStore(f17,
used = c("syn5511439", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f18 <- synGet("syn10903828", downloadFile = FALSE)
f18 <- synStore(f18,
used = c("syn5511444", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f19 <- synGet("syn11059980", downloadFile = FALSE)
f19 <- synStore(f19,
used = c("syn5511444", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f20 <- synGet("syn10927961", downloadFile = FALSE)
f20 <- synStore(f20,
used = c("syn5511444", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f15 <- synGet("syn10903849", downloadFile = FALSE)
f15 <- synStore(f15,
used = c("syn5511439", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f15 <- synGet("syn10903849", downloadFile = FALSE)
f15 <- synStore(f15,
used = c("syn5511439", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f15 <- synGet("syn10903849", downloadFile = FALSE)
f15 <- synStore(f15,
used = c("syn5511439", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f15 <- synGet("syn10903849", downloadFile = FALSE)
f15 <- synStore(f15,
used = c("syn5511439", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f16 <- synGet("syn11059974", downloadFile = FALSE)
f16 <- synStore(f16,
used = c("syn5511439", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f17 <- synGet("syn10933730", downloadFile = FALSE)
f17 <- synStore(f17,
used = c("syn5511439", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f18 <- synGet("syn10903828", downloadFile = FALSE)
f18 <- synStore(f18,
used = c("syn5511444", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f19 <- synGet("syn11059980", downloadFile = FALSE)
f19 <- synStore(f19,
used = c("syn5511444", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f20 <- synGet("syn10927961", downloadFile = FALSE)
f20 <- synStore(f20,
used = c("syn5511444", "syn5511429"),
executed = "https://github.com/Sage-Bionetworks/mpowertools")
f0 <- synGet("syn11565429", downloadFile = FALSE)
f0 <- synStore(f0,
used = c("https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/utility_functions_disease_recognition_and_identity_confounding.R?token=AAI6zwVqpa2otvq-BDmrqCqhmuTHvyPMks5aQr6HwA%3D%3D"),
executed = "https://raw.githubusercontent.com/Sage-Bionetworks/mHealthIdentityConfounding/master/code/run_simulation_study.R?token=ABoVeaM64I81DdSRlGXola9s18rTi0jxks5aQ-tCwA%3D%3D")
